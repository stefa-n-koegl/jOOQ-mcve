/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.sqlserver.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.sqlserver.Keys;
import org.jooq.mcve.java.sqlserver.Mcve;
import org.jooq.mcve.java.sqlserver.tables.Foo.FooPath;
import org.jooq.mcve.java.sqlserver.tables.records.BarRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Bar extends TableImpl<BarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>master.mcve.bar</code>
     */
    public static final Bar BAR = new Bar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BarRecord> getRecordType() {
        return BarRecord.class;
    }

    /**
     * The column <code>master.mcve.bar.id</code>.
     */
    public final TableField<BarRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>master.mcve.bar.foo_id</code>.
     */
    public final TableField<BarRecord, Integer> FOO_ID = createField(DSL.name("foo_id"), SQLDataType.INTEGER, this, "");

    private Bar(Name alias, Table<BarRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bar(Name alias, Table<BarRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>master.mcve.bar</code> table reference
     */
    public Bar(String alias) {
        this(DSL.name(alias), BAR);
    }

    /**
     * Create an aliased <code>master.mcve.bar</code> table reference
     */
    public Bar(Name alias) {
        this(alias, BAR);
    }

    /**
     * Create a <code>master.mcve.bar</code> table reference
     */
    public Bar() {
        this(DSL.name("bar"), null);
    }

    public <O extends Record> Bar(Table<O> path, ForeignKey<O, BarRecord> childPath, InverseForeignKey<O, BarRecord> parentPath) {
        super(path, childPath, parentPath, BAR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BarPath extends Bar implements Path<BarRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BarPath(Table<O> path, ForeignKey<O, BarRecord> childPath, InverseForeignKey<O, BarRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BarPath(Name alias, Table<BarRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BarPath as(String alias) {
            return new BarPath(DSL.name(alias), this);
        }

        @Override
        public BarPath as(Name alias) {
            return new BarPath(alias, this);
        }

        @Override
        public BarPath as(Table<?> alias) {
            return new BarPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<BarRecord> getPrimaryKey() {
        return Keys.BAR__PK_BAR;
    }

    @Override
    public List<ForeignKey<BarRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FOO_BAR);
    }

    private transient FooPath _foo;

    /**
     * Get the implicit join path to the <code>master.mcve.foo</code> table.
     */
    public FooPath foo() {
        if (_foo == null)
            _foo = new FooPath(this, Keys.FK_FOO_BAR, null);

        return _foo;
    }

    @Override
    public Bar as(String alias) {
        return new Bar(DSL.name(alias), this);
    }

    @Override
    public Bar as(Name alias) {
        return new Bar(alias, this);
    }

    @Override
    public Bar as(Table<?> alias) {
        return new Bar(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(String name) {
        return new Bar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Name name) {
        return new Bar(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bar rename(Table<?> name) {
        return new Bar(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar where(Condition condition) {
        return new Bar(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bar where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bar where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bar where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bar where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bar whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
